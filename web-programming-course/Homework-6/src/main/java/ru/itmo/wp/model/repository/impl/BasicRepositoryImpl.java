package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Entity;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;

public abstract class BasicRepositoryImpl {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    public Entity find(long id) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(String.format("SELECT * FROM %s WHERE id=%d", tableName(),id))) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toObject(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Connection error.", e);
        }
    }

    protected abstract String tableName();

    protected abstract Entity toObject(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    protected void save(Entity obj, String fields, String values, String... optional) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    String.format("INSERT INTO %s %s VALUES %s", tableName(), fields, values),
                    Statement.RETURN_GENERATED_KEYS
            )) {
                setStatement(statement, obj, optional);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException(String.format("Can't save %s.", tableName()));
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        obj.setId(generatedKeys.getLong(1));
                        obj.setCreationTime(find(obj.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException(String.format("Can't save %s [no autogenerated fields].", tableName()));
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException(String.format("Can't save %s.", tableName()), e);
        }
    }

    protected abstract void setStatement(PreparedStatement statement, Entity obj, String... optional) throws SQLException;
}
